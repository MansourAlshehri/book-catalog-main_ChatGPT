#!/usr/bin/env python3
"""
Storage_MS (internal) - Server_1
Port: 5003
Databases:
 - database2.db : stores parcel ids and car ids
 - database1.db : stores deliveries
Usage: python storage_ms.py
"""
from flask import Flask, request, Response
import yaml, sqlite3, time, os

app = Flask("Storage_MS")

DB2 = "database2.db"  # IDs
DB1 = "database1.db"  # Deliveries

def yaml_response(obj, status=200):
    return Response(yaml.safe_dump(obj), status=status, mimetype="application/x-yaml")

def init_db():
    if not os.path.exists(DB2):
        conn = sqlite3.connect(DB2)
        c = conn.cursor()
        c.execute("CREATE TABLE parcels (parcel_id TEXT PRIMARY KEY, meta TEXT, created_at REAL)")
        c.execute("CREATE TABLE cars (car_id TEXT PRIMARY KEY, status TEXT, created_at REAL)")
        conn.commit()
        conn.close()
    if not os.path.exists(DB1):
        conn = sqlite3.connect(DB1)
        c = conn.cursor()
        c.execute("""CREATE TABLE deliveries (
                        delivery_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        parcel_id TEXT,
                        car_id TEXT,
                        status TEXT,
                        created_at REAL,
                        updated_at REAL
                    )""")
        conn.commit()
        conn.close()

@app.route("/store_id", methods=["POST"])
def store_id():
    """
    IDGen_MS posts here: {parcel_id: "...", meta: {...}}
    Stores in Database_2.
    """
    try:
        data = yaml.safe_load(request.data.decode() or "{}")
    except Exception:
        return yaml_response({"error":"invalid yaml"}, status=400)
    pid = data.get("parcel_id")
    meta = yaml.safe_dump(data.get("meta", {}))
    if not pid:
        return yaml_response({"error":"missing parcel_id"}, status=400)
    conn = sqlite3.connect(DB2)
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO parcels(parcel_id, meta, created_at) VALUES (?,?,?)",
              (pid, meta, time.time()))
    conn.commit()
    conn.close()
    return yaml_response({"stored": True, "parcel_id": pid})

@app.route("/store_car", methods=["POST"])
def store_car():
    """
    Car_MS posts here: {car_id: "...", status: "..."}
    Stores in Database_2.
    """
    try:
        data = yaml.safe_load(request.data.decode() or "{}")
    except Exception:
        return yaml_response({"error":"invalid yaml"}, status=400)
    cid = data.get("car_id")
    status = data.get("status", "idle")
    if not cid:
        return yaml_response({"error":"missing car_id"}, status=400)
    conn = sqlite3.connect(DB2)
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO cars(car_id, status, created_at) VALUES (?,?,?)",
              (cid, status, time.time()))
    conn.commit()
    conn.close()
    return yaml_response({"stored": True, "car_id": cid})

@app.route("/get_parcel_id", methods=["POST"])
def get_parcel_id():
    """
    Controller asks for a parcel id; request may include filter meta.
    Returns latest parcel id available.
    """
    try:
        _ = yaml.safe_load(request.data.decode() or "{}")
    except Exception:
        return yaml_response({"error":"invalid yaml"}, status=400)
    conn = sqlite3.connect(DB2)
    c = conn.cursor()
    c.execute("SELECT parcel_id, meta, created_at FROM parcels ORDER BY created_at DESC LIMIT 1")
    row = c.fetchone()
    conn.close()
    if not row:
        return yaml_response({"error":"no parcel found"}, status=404)
    return yaml_response({"parcel_id": row[0], "meta": yaml.safe_load(row[1]) if row[1] else {}, "created_at": row[2]})

@app.route("/get_car_id", methods=["POST"])
def get_car_id():
    """
    Controller asks for car id. Returns a car id.
    """
    try:
        _ = yaml.safe_load(request.data.decode() or "{}")
    except Exception:
        return yaml_response({"error":"invalid yaml"}, status=400)
    conn = sqlite3.connect(DB2)
    c = conn.cursor()
    c.execute("SELECT car_id,status,created_at FROM cars ORDER BY created_at DESC LIMIT 1")
    row = c.fetchone()
    conn.close()
    if not row:
        return yaml_response({"error":"no car found"}, status=404)
    return yaml_response({"car_id": row[0], "status": row[1], "created_at": row[2]})

@app.route("/store_delivery", methods=["POST"])
def store_delivery():
    """
    Controller provides delivery info: {parcel_id:..., car_id:..., status:...}
    Stores in Database_1.
    """
    try:
        data = yaml.safe_load(request.data.decode() or "{}")
    except Exception:
        return yaml_response({"error":"invalid yaml"}, status=400)
    pid = data.get("parcel_id")
    cid = data.get("car_id")
    status = data.get("status", "assigned")
    if not pid or not cid:
        return yaml_response({"error":"missing fields"}, status=400)
    conn = sqlite3.connect(DB1)
    c = conn.cursor()
    now = time.time()
    c.execute("INSERT INTO deliveries(parcel_id,car_id,status,created_at,updated_at) VALUES (?,?,?,?,?)",
              (pid, cid, status, now, now))
    conn.commit()
    delivery_id = c.lastrowid
    conn.close()
    return yaml_response({"stored": True, "delivery_id": delivery_id})

@app.route("/update_delivery", methods=["POST"])
def update_delivery():
    """
    Update an existing delivery: {delivery_id: int, status: "..."}
    """
    try:
        data = yaml.safe_load(request.data.decode() or "{}")
    except Exception:
        return yaml_response({"error":"invalid yaml"}, status=400)
    did = data.get("delivery_id")
    status = data.get("status")
    if not did or not status:
        return yaml_response({"error":"missing fields"}, status=400)
    conn = sqlite3.connect(DB1)
    c = conn.cursor()
    c.execute("UPDATE deliveries SET status = ?, updated_at = ? WHERE delivery_id = ?", (status, time.time(), did))
    conn.commit()
    conn.close()
    return yaml_response({"updated": True, "delivery_id": did})

if __name__ == "__main__":
    init_db()
    print("Starting Storage_MS on port 5003")
    app.run(host="0.0.0.0", port=5003)

